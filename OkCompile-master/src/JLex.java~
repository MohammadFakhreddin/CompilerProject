/* The following code was generated by JFlex 1.6.0 */

/* --------------------------Usercode Section------------------------ */

import java.util.ArrayList;
import java.util.List;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Espadan/IdeaProjects/okCompilePhase1/OkCompile/lexInput.flex</tt>
 */
class JLex implements YYParser.Lexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\17\1\16\1\24\1\25\1\15\22\0\1\17\2\0\1\4" +
                    "\1\0\1\44\1\0\1\22\1\55\1\56\1\43\1\41\1\53\1\42" +
                    "\1\26\1\23\1\2\11\3\1\54\1\57\1\0\1\45\1\0\1\46" +
                    "\1\0\32\20\1\51\1\21\1\52\3\0\1\12\1\35\1\34\1\30" +
                    "\1\10\1\11\1\37\1\31\1\32\1\20\1\36\1\13\1\20\1\1" +
                    "\1\27\1\20\1\40\1\6\1\14\1\5\1\7\1\20\1\33\3\20" +
                    "\1\47\1\0\1\50\7\0\1\24\u1fa2\0\1\24\1\24\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\2\1\2\2\11\1\2\3\2\1\1\4\1\5" +
                    "\6\1\4\4\1\6\1\7\1\10\1\11\1\12\1\13" +
                    "\1\14\1\15\1\16\1\17\1\20\15\0\1\21\12\0" +
                    "\1\22\2\0\1\23\2\0\1\24\1\25\3\0\1\26" +
                    "\2\0\1\27\5\0\1\30\7\0\1\31\1\32\2\0" +
                    "\1\32\5\0\1\33\6\0\1\34\2\0\1\35\2\0" +
                    "\1\22\4\32\1\0\1\36\14\0\1\37\3\0\2\40" +
                    "\1\0\1\41\1\42\2\0\1\43\3\0\4\32\2\0" +
                    "\1\44\7\0\1\45\1\0\1\32\2\0\1\32\1\0" +
                    "\1\46\1\47\4\0\1\50\1\51\1\52\1\53\1\54" +
                    "\2\0\1\55";

    private static int[] zzUnpackAction() {
        int[] result = new int[185];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150" +
                    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\60" +
                    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420" +
                    "\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\60\0\60\0\60" +
                    "\0\60\0\60\0\60\0\60\0\60\0\60\0\60\0\60" +
                    "\0\60\0\u0540\0\u0180\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630" +
                    "\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0" +
                    "\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930" +
                    "\0\u0960\0\u0570\0\u0990\0\u09c0\0\60\0\u09f0\0\u0a20\0\u0a50" +
                    "\0\60\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0" +
                    "\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\60\0\u0cc0\0\u0cf0" +
                    "\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0ba0\0\u0b10\0\u0e10" +
                    "\0\u0e40\0\u0ba0\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60" +
                    "\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u0ba0\0\u10b0" +
                    "\0\u10e0\0\u0ba0\0\u1110\0\u1140\0\60\0\u1170\0\u11a0\0\u11d0" +
                    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350" +
                    "\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u1260" +
                    "\0\u14d0\0\u1500\0\u1530\0\u1560\0\u0f60\0\u1590\0\u05d0\0\u0ba0" +
                    "\0\u15c0\0\u15f0\0\u0ba0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0" +
                    "\0\u1710\0\u1740\0\u1770\0\u17a0\0\u0ba0\0\u17d0\0\u1800\0\u1830" +
                    "\0\u1860\0\u1890\0\u18c0\0\u1560\0\u18f0\0\u1920\0\u1950\0\u1980" +
                    "\0\u19b0\0\u19e0\0\u1a10\0\u0ba0\0\u0180\0\u1a40\0\u1a70\0\u1aa0" +
                    "\0\u1ad0\0\u18f0\0\u0ba0\0\u0ba0\0\u11d0\0\u1710\0\u1b00\0\u1b30" +
                    "\0\u0ba0";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[185];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\2\20\1\11" +
                    "\1\21\1\22\1\23\1\2\1\20\1\24\1\25\1\26" +
                    "\1\11\1\27\1\30\1\31\1\32\3\11\1\33\1\34" +
                    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44" +
                    "\1\45\1\46\1\47\1\50\1\51\61\0\1\52\2\53" +
                    "\1\0\1\54\1\55\1\53\1\56\1\53\1\57\1\53" +
                    "\1\60\3\0\1\53\6\0\1\61\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\52\2\67\1\0" +
                    "\1\54\1\55\1\53\1\56\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\5\0\1\70\1\71\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\52\2\5\1\0" +
                    "\1\54\1\55\1\53\1\56\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\5\0\1\70\1\71\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\72\3\0\10\72" +
                    "\3\0\1\72\6\0\12\72\20\0\1\52\2\53\1\0" +
                    "\1\54\1\73\1\53\1\56\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\74\1\63\1\64" +
                    "\1\65\1\66\3\53\20\0\1\52\2\53\1\0\1\54" +
                    "\1\55\1\53\1\75\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\1\52\2\53\1\0\1\54\1\55" +
                    "\1\53\1\56\1\53\1\57\1\53\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\65\1\66" +
                    "\3\53\20\0\1\76\2\53\1\0\1\54\1\55\1\53" +
                    "\1\56\1\53\1\57\1\77\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\63\1\64\1\65\1\66\3\53" +
                    "\20\0\1\52\2\53\1\0\1\54\1\55\1\53\1\56" +
                    "\1\53\1\100\1\53\1\60\3\0\1\53\6\0\1\71" +
                    "\1\62\1\53\1\63\1\64\1\65\1\66\3\53\20\0" +
                    "\1\101\2\53\1\0\1\54\1\55\1\53\1\56\1\53" +
                    "\1\57\1\53\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\53\1\63\1\64\1\65\1\66\3\53\20\0\1\52" +
                    "\2\53\1\0\1\102\1\55\1\53\1\56\1\53\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\71\1\62\1\53" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\1\52\2\53" +
                    "\1\0\1\103\1\55\1\53\1\56\1\53\1\57\1\53" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\53\1\63" +
                    "\1\104\1\65\1\66\3\53\35\0\1\20\44\0\1\105" +
                    "\1\0\10\105\3\0\1\105\1\106\5\0\12\105\22\0" +
                    "\1\107\1\0\10\107\3\0\1\107\6\0\12\107\42\0" +
                    "\1\110\21\0\1\111\13\0\1\112\6\0\1\113\2\0" +
                    "\1\112\23\0\1\114\21\0\1\52\2\53\1\0\1\54" +
                    "\1\115\1\53\1\56\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\1\52\2\53\1\0\1\54\1\55" +
                    "\1\53\1\116\1\53\1\57\1\53\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\65\1\66" +
                    "\3\53\20\0\1\117\2\53\1\0\1\54\1\55\1\53" +
                    "\1\56\1\120\1\57\1\53\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\63\1\64\1\65\1\66\3\53" +
                    "\20\0\1\52\2\53\1\0\1\54\1\55\1\53\1\56" +
                    "\1\53\1\57\1\53\1\60\3\0\1\53\6\0\1\71" +
                    "\1\62\1\121\1\63\1\64\1\65\1\66\3\53\20\0" +
                    "\1\52\2\53\1\0\1\54\1\55\1\53\1\56\1\53" +
                    "\1\122\1\53\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\123\1\63\1\64\1\65\1\66\3\53\20\0\1\52" +
                    "\2\53\1\0\1\54\1\124\1\53\1\56\1\53\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\125\1\62\1\53" +
                    "\1\63\1\64\1\65\1\66\3\53\60\0\1\126\3\0" +
                    "\1\111\54\0\1\126\2\0\1\111\57\0\1\111\13\0" +
                    "\1\52\2\53\1\0\1\54\1\55\1\53\1\56\1\53" +
                    "\1\57\1\53\1\60\3\0\1\53\6\0\1\127\1\62" +
                    "\1\53\1\63\1\64\1\65\1\66\3\53\20\0\1\52" +
                    "\2\53\1\0\1\54\1\55\1\53\1\56\1\53\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\71\1\62\1\130" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\1\52\2\53" +
                    "\1\0\1\54\1\55\1\53\1\131\1\53\1\57\1\53" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\132\2\53\1\0" +
                    "\1\54\1\55\1\53\1\56\1\53\1\57\1\133\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\53\1\63\1\64" +
                    "\1\65\1\66\3\53\20\0\1\132\2\53\1\0\1\54" +
                    "\1\55\1\53\1\56\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\1\52\2\53\1\0\1\134\1\55" +
                    "\1\53\1\56\1\53\1\57\1\53\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\135\1\65\1\66" +
                    "\3\53\20\0\1\52\2\53\1\0\1\136\1\137\1\53" +
                    "\1\56\1\53\1\57\1\53\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\63\1\64\1\65\1\66\3\53" +
                    "\20\0\1\52\2\53\1\0\1\54\1\55\1\53\1\140" +
                    "\1\53\1\57\1\53\1\60\3\0\1\53\6\0\1\71" +
                    "\1\62\1\53\1\63\1\64\1\65\1\66\3\53\20\0" +
                    "\1\141\2\53\1\0\1\54\1\55\1\53\1\56\1\142" +
                    "\1\57\1\53\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\53\1\63\1\64\1\65\1\66\3\53\20\0\1\52" +
                    "\2\53\1\0\1\54\1\55\1\53\1\56\1\53\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\71\1\62\1\143" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\1\52\2\53" +
                    "\1\0\1\54\1\55\1\53\1\56\1\53\1\144\1\53" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\145\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\52\2\53\1\0" +
                    "\1\54\1\55\1\53\1\56\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\6\0\1\146\1\62\1\53\1\63\1\64" +
                    "\1\65\1\66\3\53\20\0\1\52\2\67\1\0\1\54" +
                    "\1\55\1\53\1\56\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\5\0\1\147\1\71\1\62\1\53\1\63\1\64" +
                    "\1\65\1\66\3\53\21\0\2\150\55\0\1\52\2\53" +
                    "\1\0\1\54\1\137\1\53\1\56\1\53\1\57\1\53" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\151\3\0\10\151" +
                    "\3\0\1\151\6\0\12\151\20\0\1\52\2\53\1\0" +
                    "\1\54\1\55\1\152\1\131\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\53\1\63\1\64" +
                    "\1\65\1\66\3\53\20\0\1\52\2\53\1\0\1\54" +
                    "\1\55\1\53\1\153\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\1\132\2\53\1\0\1\154\1\55" +
                    "\1\53\1\56\1\53\1\155\1\133\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\156\1\66" +
                    "\3\53\20\0\1\52\2\53\1\0\1\54\1\55\1\53" +
                    "\1\56\1\53\1\57\1\53\1\60\3\0\1\53\6\0" +
                    "\1\127\1\157\1\53\1\63\1\64\1\65\1\66\3\53" +
                    "\20\0\1\52\2\53\1\0\1\54\1\55\1\53\1\56" +
                    "\1\53\1\57\1\53\1\160\3\0\1\53\6\0\1\71" +
                    "\1\62\1\53\1\63\1\64\1\65\1\66\3\53\20\0" +
                    "\1\132\2\53\1\0\1\54\1\55\1\53\1\56\1\53" +
                    "\1\57\1\161\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\53\1\63\1\64\1\65\1\66\3\53\20\0\1\52" +
                    "\2\53\1\0\1\54\1\55\1\53\1\56\1\53\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\127\1\162\1\53" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\1\52\2\53" +
                    "\1\0\1\54\1\55\1\53\1\56\1\53\1\163\1\53" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\130\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\52\2\53\1\0" +
                    "\1\54\1\55\1\53\1\56\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\143\1\164\1\64" +
                    "\1\65\1\66\3\53\22\0\1\105\1\0\10\105\3\0" +
                    "\1\105\6\0\12\105\41\0\1\105\35\0\15\110\2\0" +
                    "\5\110\2\0\32\110\10\0\1\165\107\0\1\165\24\0" +
                    "\1\165\2\0\1\165\50\0\3\142\1\0\1\142\1\137" +
                    "\1\142\1\166\4\142\3\0\1\142\6\0\3\142\1\167" +
                    "\1\142\1\170\1\171\3\142\20\0\1\132\2\53\1\0" +
                    "\1\54\1\55\1\53\1\56\1\172\1\57\1\133\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\53\1\63\1\64" +
                    "\1\65\1\66\3\53\20\0\1\52\2\53\1\0\1\173" +
                    "\1\55\1\53\1\56\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\127\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\3\142\1\0\1\142\1\137\6\142" +
                    "\3\0\1\142\6\0\3\142\1\167\1\142\1\170\1\171" +
                    "\3\142\20\0\1\52\2\53\1\0\1\54\1\55\1\53" +
                    "\1\56\1\53\1\57\1\53\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\174\1\64\1\65\1\66\3\53" +
                    "\20\0\1\132\2\53\1\0\1\54\1\55\1\53\1\56" +
                    "\1\53\1\57\1\53\1\175\3\0\1\53\6\0\1\71" +
                    "\1\62\1\53\1\63\1\64\1\65\1\66\3\53\20\0" +
                    "\1\52\2\53\1\0\1\54\1\55\1\53\1\56\1\53" +
                    "\1\176\1\53\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\53\1\63\1\64\1\65\1\66\3\53\20\0\1\52" +
                    "\2\53\1\0\1\54\1\55\1\53\1\177\1\53\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\71\1\62\1\53" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\1\52\2\53" +
                    "\1\0\1\54\1\137\1\53\1\56\1\53\1\57\1\53" +
                    "\1\60\3\0\1\53\6\0\1\200\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\52\2\53\1\0" +
                    "\1\142\1\137\1\53\1\56\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\53\1\63\1\64" +
                    "\1\65\1\66\3\53\20\0\1\52\2\53\1\0\1\54" +
                    "\1\55\1\53\1\201\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\1\132\2\53\1\0\1\202\1\55" +
                    "\1\53\1\56\1\53\1\203\1\133\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\65\1\66" +
                    "\3\53\20\0\1\52\2\53\1\0\1\54\1\55\1\53" +
                    "\1\56\1\53\1\57\1\53\1\60\3\0\1\53\6\0" +
                    "\1\127\1\142\1\53\1\63\1\64\1\65\1\66\3\53" +
                    "\20\0\1\52\2\53\1\0\1\54\1\55\1\53\1\56" +
                    "\1\53\1\57\1\53\1\204\3\0\1\53\6\0\1\71" +
                    "\1\62\1\53\1\63\1\64\1\65\1\66\3\53\20\0" +
                    "\1\52\2\53\1\0\1\54\1\55\1\53\1\56\1\53" +
                    "\1\205\1\53\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\130\1\63\1\64\1\65\1\66\3\53\20\0\1\52" +
                    "\2\53\1\0\1\54\1\55\1\53\1\56\1\53\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\71\1\62\1\143" +
                    "\1\206\1\64\1\65\1\66\3\53\20\0\1\132\2\53" +
                    "\1\0\1\54\1\55\1\53\1\56\1\207\1\57\1\133" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\52\2\53\1\0" +
                    "\1\210\1\55\1\53\1\56\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\6\0\1\127\1\62\1\53\1\63\1\64" +
                    "\1\65\1\66\3\53\20\0\1\52\2\53\1\0\1\54" +
                    "\1\55\1\53\1\56\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\211\1\64\1\65" +
                    "\1\66\3\53\20\0\1\132\2\53\1\0\1\54\1\55" +
                    "\1\53\1\56\1\53\1\57\1\53\1\204\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\65\1\66" +
                    "\3\53\20\0\1\52\2\53\1\0\1\54\1\55\1\53" +
                    "\1\56\1\53\1\212\1\53\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\63\1\64\1\65\1\66\3\53" +
                    "\20\0\1\52\2\53\1\0\1\54\1\137\1\53\1\56" +
                    "\1\53\1\57\1\53\1\60\3\0\1\53\6\0\1\213" +
                    "\1\62\1\53\1\63\1\64\1\65\1\66\3\53\21\0" +
                    "\2\214\56\0\1\215\1\150\56\0\2\216\55\0\1\52" +
                    "\2\53\1\0\1\54\1\55\1\53\1\217\1\53\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\71\1\62\1\53" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\1\220\2\53" +
                    "\1\0\1\54\1\55\1\53\1\56\1\53\1\57\1\133" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\52\2\53\1\0" +
                    "\1\54\1\55\1\221\1\56\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\130\1\63\1\64" +
                    "\1\65\1\66\3\53\20\0\1\132\2\53\1\0\1\54" +
                    "\1\55\1\53\1\56\1\53\1\57\1\173\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\1\52\2\53\1\0\1\54\1\55" +
                    "\1\53\1\56\1\53\1\144\1\53\1\60\3\0\1\53" +
                    "\6\0\1\222\1\62\1\145\1\63\1\64\1\65\1\66" +
                    "\3\53\20\0\1\52\2\53\1\0\1\134\1\55\1\53" +
                    "\1\223\1\53\1\57\1\53\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\63\1\135\1\65\1\66\3\53" +
                    "\20\0\1\52\2\53\1\0\1\54\1\55\1\53\1\56" +
                    "\1\53\1\57\1\53\1\224\3\0\1\53\6\0\1\71" +
                    "\1\62\1\53\1\63\1\64\1\65\1\66\3\53\20\0" +
                    "\1\132\2\53\1\0\1\225\1\55\1\53\1\56\1\53" +
                    "\1\57\1\53\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\53\1\63\1\64\1\65\1\66\3\53\20\0\1\141" +
                    "\2\53\1\0\1\226\1\55\1\53\1\56\1\142\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\71\1\62\1\53" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\3\142\1\0" +
                    "\1\142\1\137\3\142\1\227\2\142\3\0\1\142\6\0" +
                    "\3\142\1\167\1\142\1\170\1\171\3\142\20\0\1\230" +
                    "\2\142\1\0\1\142\1\137\6\142\3\0\1\142\6\0" +
                    "\3\142\1\167\1\142\1\170\1\171\3\142\20\0\3\142" +
                    "\1\0\1\142\1\137\6\142\3\0\1\142\6\0\2\142" +
                    "\1\231\1\167\1\142\1\170\1\171\3\142\20\0\3\142" +
                    "\1\0\1\142\1\137\6\142\3\0\1\142\6\0\1\232" +
                    "\2\142\1\167\1\142\1\170\1\171\3\142\20\0\1\52" +
                    "\2\53\1\0\1\54\1\55\1\53\1\56\1\53\1\233" +
                    "\1\53\1\60\3\0\1\53\6\0\1\71\1\62\1\53" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\3\210\1\0" +
                    "\10\210\3\0\1\210\6\0\12\210\20\0\1\141\2\53" +
                    "\1\0\1\54\1\55\1\53\1\56\1\142\1\57\1\234" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\52\2\53\1\0" +
                    "\1\134\1\55\1\53\1\235\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\53\1\63\1\135" +
                    "\1\65\1\66\3\53\20\0\1\132\2\53\1\0\1\54" +
                    "\1\173\1\53\1\56\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\1\132\2\53\1\0\1\202\1\55" +
                    "\1\53\1\56\1\53\1\236\1\133\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\65\1\66" +
                    "\3\53\20\0\1\52\2\53\1\0\1\54\1\137\1\53" +
                    "\1\56\1\53\1\57\1\173\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\63\1\64\1\65\1\66\3\53" +
                    "\20\0\1\142\2\53\1\0\1\54\1\55\1\53\1\56" +
                    "\1\53\1\57\1\133\1\60\3\0\1\53\6\0\1\71" +
                    "\1\62\1\53\1\63\1\64\1\65\1\66\3\53\20\0" +
                    "\1\52\2\53\1\0\1\54\1\55\1\237\1\56\1\53" +
                    "\1\57\1\53\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\130\1\63\1\64\1\65\1\66\3\53\20\0\1\132" +
                    "\2\53\1\0\1\54\1\55\1\53\1\56\1\53\1\57" +
                    "\1\210\1\60\3\0\1\53\6\0\1\71\1\62\1\53" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\1\52\2\53" +
                    "\1\0\1\134\1\55\1\53\1\142\1\53\1\57\1\53" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\53\1\63" +
                    "\1\135\1\65\1\66\3\53\20\0\1\132\2\53\1\0" +
                    "\1\240\1\55\1\53\1\56\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\53\1\63\1\64" +
                    "\1\65\1\66\3\53\20\0\1\141\2\53\1\0\1\241" +
                    "\1\55\1\53\1\56\1\142\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\1\52\2\53\1\0\1\54\1\55" +
                    "\1\53\1\56\1\53\1\242\1\53\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\65\1\66" +
                    "\3\53\20\0\1\141\2\53\1\0\1\54\1\55\1\53" +
                    "\1\56\1\142\1\57\1\243\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\63\1\64\1\65\1\66\3\53" +
                    "\20\0\1\132\2\53\1\0\1\54\1\210\1\53\1\56" +
                    "\1\53\1\57\1\53\1\60\3\0\1\53\6\0\1\71" +
                    "\1\62\1\53\1\63\1\64\1\65\1\66\3\53\20\0" +
                    "\1\52\2\53\1\0\1\54\1\137\1\53\1\56\1\53" +
                    "\1\57\1\210\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\53\1\63\1\64\1\65\1\66\3\53\21\0\1\214" +
                    "\1\244\56\0\2\245\55\0\1\52\2\53\1\0\1\54" +
                    "\1\246\1\53\1\56\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\1\52\2\53\1\0\1\54\1\247" +
                    "\1\53\1\56\1\53\1\57\1\53\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\65\1\66" +
                    "\3\53\20\0\1\52\2\53\1\0\1\134\1\55\1\53" +
                    "\1\217\1\53\1\57\1\53\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\63\1\135\1\65\1\66\3\53" +
                    "\20\0\1\52\2\53\1\0\1\54\1\55\1\53\1\56" +
                    "\1\53\1\57\1\53\1\60\3\0\1\53\6\0\1\71" +
                    "\1\62\1\130\1\250\1\64\1\65\1\66\3\53\20\0" +
                    "\1\52\2\53\1\0\1\54\1\55\1\53\1\56\1\53" +
                    "\1\57\1\53\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\130\1\63\1\64\1\251\1\66\3\53\20\0\3\142" +
                    "\1\0\1\142\1\137\4\142\1\210\1\142\3\0\1\142" +
                    "\6\0\3\142\1\167\1\142\1\170\1\171\3\142\20\0" +
                    "\3\142\1\0\1\210\1\137\6\142\3\0\1\142\6\0" +
                    "\3\142\1\167\1\142\1\170\1\171\3\142\20\0\3\142" +
                    "\1\0\1\142\1\137\3\142\1\252\2\142\3\0\1\142" +
                    "\6\0\3\142\1\167\1\142\1\170\1\171\3\142\20\0" +
                    "\3\142\1\0\1\142\1\137\6\142\3\0\1\142\6\0" +
                    "\1\227\2\142\1\167\1\142\1\170\1\171\3\142\20\0" +
                    "\1\132\2\53\1\0\1\54\1\55\1\253\1\56\1\53" +
                    "\1\57\1\53\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\53\1\63\1\64\1\65\1\66\3\53\20\0\1\52" +
                    "\2\53\1\0\1\54\1\55\1\53\1\254\1\53\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\71\1\62\1\53" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\1\132\2\53" +
                    "\1\0\1\54\1\55\1\53\1\56\1\53\1\57\1\210" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\1\255\2\53\20\0\1\52\2\53" +
                    "\1\0\1\54\1\256\1\53\1\56\1\53\1\57\1\53" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\53\1\63" +
                    "\1\64\1\65\1\66\3\53\20\0\1\52\2\53\1\0" +
                    "\1\54\1\55\1\53\1\56\1\53\1\57\1\53\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\130\1\257\1\64" +
                    "\1\65\1\66\3\53\20\0\1\52\2\53\1\0\1\54" +
                    "\1\55\1\53\1\56\1\53\1\57\1\53\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\130\1\63\1\64\1\260" +
                    "\1\66\3\53\20\0\1\132\2\53\1\0\1\54\1\55" +
                    "\1\261\1\56\1\53\1\57\1\53\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\65\1\66" +
                    "\3\53\20\0\1\52\2\53\1\0\1\54\1\55\1\53" +
                    "\1\142\1\53\1\57\1\53\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\63\1\64\1\65\1\66\3\53" +
                    "\20\0\3\262\1\0\10\262\3\0\1\262\6\0\12\262" +
                    "\20\0\1\263\2\53\1\0\1\54\1\55\1\53\1\131" +
                    "\1\53\1\57\1\53\1\60\3\0\1\53\6\0\1\71" +
                    "\1\62\1\53\1\63\1\64\1\65\1\66\3\53\20\0" +
                    "\3\142\1\0\1\142\1\137\1\142\1\166\4\142\3\0" +
                    "\1\142\6\0\1\142\1\264\1\142\1\167\1\142\1\170" +
                    "\1\171\3\142\20\0\1\141\2\53\1\0\1\54\1\55" +
                    "\1\53\1\56\1\142\1\57\1\53\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\265\1\66" +
                    "\3\53\20\0\1\52\2\53\1\0\1\54\1\55\1\53" +
                    "\1\56\1\53\1\144\1\53\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\266\1\63\1\64\1\65\1\66\3\53" +
                    "\20\0\3\142\1\0\1\142\1\210\6\142\3\0\1\142" +
                    "\6\0\3\142\1\167\1\142\1\170\1\171\3\142\20\0" +
                    "\1\52\2\53\1\0\1\54\1\55\1\53\1\56\1\53" +
                    "\1\57\1\267\1\60\3\0\1\53\6\0\1\71\1\62" +
                    "\1\53\1\63\1\64\1\65\1\66\3\53\20\0\1\142" +
                    "\2\53\1\0\1\54\1\55\1\53\1\131\1\53\1\57" +
                    "\1\53\1\60\3\0\1\53\6\0\1\71\1\62\1\53" +
                    "\1\63\1\64\1\65\1\66\3\53\20\0\1\141\2\53" +
                    "\1\0\1\54\1\55\1\53\1\56\1\142\1\57\1\53" +
                    "\1\60\3\0\1\53\6\0\1\71\1\62\1\53\1\63" +
                    "\1\64\1\170\1\66\3\53\20\0\1\52\2\53\1\0" +
                    "\1\54\1\55\1\53\1\56\1\53\1\144\1\53\1\60" +
                    "\3\0\1\53\6\0\1\71\1\62\1\231\1\63\1\64" +
                    "\1\65\1\66\3\53\20\0\1\52\2\53\1\0\1\54" +
                    "\1\55\1\53\1\56\1\53\1\57\1\270\1\60\3\0" +
                    "\1\53\6\0\1\71\1\62\1\53\1\63\1\64\1\65" +
                    "\1\66\3\53\20\0\1\52\2\53\1\0\1\271\1\55" +
                    "\1\53\1\56\1\53\1\57\1\53\1\60\3\0\1\53" +
                    "\6\0\1\71\1\62\1\53\1\63\1\64\1\65\1\66" +
                    "\3\53\20\0\1\52\2\53\1\0\1\142\1\55\1\53" +
                    "\1\56\1\53\1\57\1\53\1\60\3\0\1\53\6\0" +
                    "\1\71\1\62\1\53\1\63\1\64\1\65\1\66\3\53" +
                    "\17\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[7008];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\15\1\1\11\15\1\14\11\15\0\1\1" +
                    "\12\0\1\1\2\0\1\11\2\0\1\1\1\11\3\0" +
                    "\1\1\2\0\1\1\5\0\1\11\7\0\2\1\2\0" +
                    "\1\1\5\0\1\1\6\0\1\1\2\0\1\1\2\0" +
                    "\1\11\4\1\1\0\1\1\14\0\1\1\3\0\2\1" +
                    "\1\0\2\1\2\0\1\1\3\0\4\1\2\0\1\1" +
                    "\7\0\1\1\1\0\1\1\2\0\1\1\1\0\2\1" +
                    "\4\0\5\1\2\0\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[185];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    private List<String> symbolTable;

    private int addSymbol(String symbol) {
        if (symbolTable == null) {
            symbolTable = new ArrayList<String>();
        }
        for (int i = 0; i < symbolTable.size(); i++) {
            if (symbol.equals(symbolTable.get(i))) {
                return i;
            }
        }
        symbolTable.add(symbol);
        return symbolTable.size() - 1;
    }

    private String getSymbol(int id) {
        return symbolTable.get(id);
    }

    private String[] relOps = new String[]{".lt", ".gt", ".ge", ".le", ".ne"};


//  static PrintStream out;
//  public static void main(String argv[]) {
//      String encodingName = "UTF-8";
//      Main scanner = null;
//      try {
//      	out = new PrintStream(new FileOutputStream("OkCompile//output.txt"));
//      	System.setOut(out);
//      	out.println("lexer output");
//        out.println("RegEx\tToken\tAttVal\n\n");
//        java.io.FileInputStream stream = new java.io.FileInputStream("OkCompile//Input.txt");
//        java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
//        scanner = new Main(reader);
//        while ( !scanner.zzAtEOF ) scanner.next_token();
//      }
//      catch (java.io.FileNotFoundException e) {
//        System.out.println("File not found : ");
//      }
//      catch (java.io.IOException e) {
//        System.out.println("IO error scanning file");
//        System.out.println(e);
//      }
//      catch (Exception e) {
//        System.out.println("Unexpected exception:");
//        e.printStackTrace();
//      }
//  }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    JLex(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 170) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

      /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

    /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int totalRead = 0;
        while (totalRead < requested) {
            int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
            if (numRead == -1) {
                break;
            }
            totalRead += numRead;
        }

        if (totalRead > 0) {
            zzEndRead += totalRead;
            if (totalRead == requested) { /* possibly more input available */
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            return false;
        }

        // totalRead = 0: End of stream
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    @Override
    public Object getLVal() {
        return null;
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public int yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1: {
                    System.out.println("Illegal character <" + yytext() + ">");
                }
                case 46:
                    break;
                case 2: {
                    System.out.println("NUMCONST\t" + yytext());
                    return YYParser.NUMCONST;
                }
                case 47:
                    break;
                case 3: { /* just skip what was found, do nothing */
                }
                case 48:
                    break;
                case 4: { //out.println("MATH_OP_KW\t"+yytext());
                    return YYParser.MATH_OP_KW;
                }
                case 49:
                    break;
                case 5: {
                    return YYParser.DOT_KW;
                }
                case 50:
                    break;
                case 6: {
                    System.out.println("ASSIGN_KW\t" + yytext());
                    return YYParser.ASSIGN_KW;
                }
                case 51:
                    break;
                case 7: {
                    System.out.println("UNARY_OP_KW\t" + yytext());
                    return YYParser.UNARY_OP_KW;
                }
                case 52:
                    break;
                case 8: {
                    return YYParser.LEFTAC;
                }
                case 53:
                    break;
                case 9: {
                    return YYParser.RIGHTAC;
                }
                case 54:
                    break;
                case 10: {
                    return YYParser.LEFTAR;
                }
                case 55:
                    break;
                case 11: {
                    return YYParser.RIGHTAR;
                }
                case 56:
                    break;
                case 12: {
                    return YYParser.COLUMN;
                }
                case 57:
                    break;
                case 13: {
                    return YYParser.TWO_COLUMN;
                }
                case 58:
                    break;
                case 14: {
                    return YYParser.LEFTPA;
                }
                case 59:
                    break;
                case 15: {
                    return YYParser.RIGHTPA;
                }
                case 60:
                    break;
                case 16: {
                    return YYParser.SEMI_COLUMN_KW;
                }
                case 61:
                    break;
                case 17: {
                    System.out.println("illegal Character\t" + yytext());
                    //return YYParser.FAKE_NUM_CONST;
                }
                case 62:
                    break;
                case 18: {
                    System.out.println("REL_OP_KW\t" + yytext());
                    return YYParser.REL_OP_KW;
                }
                case 63:
                    break;
                case 19: {
                    System.out.println("CHARCONST\t" + yytext());
                    return YYParser.CHARCONST;
                }
                case 64:
                    break;
                case 20: {
                    System.out.println("COMMENT\t" + yytext());
                    return YYParser.COMMENT;
                }
                case 65:
                    break;
                case 21: {
                    System.out.println("MATH_OP_ASSIGN_KW\t" + yytext());
                    return YYParser.MATH_OP_ASSIGN_KW;
                }
                case 66:
                    break;
                case 22: {
                    System.out.println("OR_KW\t" + yytext());
                    return YYParser.OR_KW;
                }
                case 67:
                    break;
                case 23: {
                    System.out.println("IF_KW\t" + yytext());
                    return YYParser.IF_KW;
                }
                case 68:
                    break;
                case 24: {
                    System.out.println("UNARY_MATH_OP_KW\t" + yytext());
                    return YYParser.UNARY_MATH_OP_KW;
                }
                case 69:
                    break;
                case 25: {
                    System.out.println("NOT_KW\t" + yytext());
                    return YYParser.NOT_KW;
                }
                case 70:
                    break;
                case 26: {
                    System.out.println("Illegal character:\t" + yytext());
                }
                case 71:
                    break;
                case 27: {
                    System.out.println("REALCONST\t" + yytext());
                    return YYParser.REALCONST;
                }
                case 72:
                    break;
                case 28: {
                    System.out.println("END_KW\t" + yytext());
                    return YYParser.END_KW;
                }
                case 73:
                    break;
                case 29: {
                    System.out.println("AND_KW\t" + yytext());
                    return YYParser.AND_KW;
                }
                case 74:
                    break;
                case 30: {
                    System.out.println("TYPESPECIFIER_KW\t" + yytext());
                    return YYParser.TYPESPECIFIER_KW;
                }
                case 75:
                    break;
                case 31: {
                    System.out.println("Illegal character:\t" + yytext());
                    //return YYParser.FAKE_TYPESPECIFIER_KW;
                }
                case 76:
                    break;
                case 32: {
                    System.out.println("illegal Character\t" + yytext());
                    //return YYParser.FAKE_REAL_CONST;
                }
                case 77:
                    break;
                case 33: {
                    System.out.println("BOOL_KW\t" + yytext());
                    return YYParser.BOOL_KW;
                }
                case 78:
                    break;
                case 34: {
                    System.out.println("THEN_KW\t" + yytext());
                    return YYParser.THEN_KW;
                }
                case 79:
                    break;
                case 35: {
                    System.out.println("ELSE_KW\t" + yytext());
                    return YYParser.ELSE_KW;
                }
                case 80:
                    break;
                case 36: {
                    System.out.println("CASE_KW\t" + yytext());
                    return YYParser.CASE_KW;
                }
                case 81:
                    break;
                case 37: {
                    int id = addSymbol(yytext());
                    System.out.println("ID\t" + yytext() + "\t" + id);
                    return YYParser.ID;
                }
                case 82:
                    break;
                case 38: {
                    System.out.println("WHILE_KW\t" + yytext());
                    return YYParser.WHILE_KW;
                }
                case 83:
                    break;
                case 39: {
                    System.out.println("BREAK_KW\t" + yytext());
                    return YYParser.BREAK_KW;
                }
                case 84:
                    break;
                case 40: {
                    System.out.println("Illegal character:\t" + yytext());
                    //return YYParser.FAKE
                }
                case 85:
                    break;
                case 41: {
                    System.out.println("RETURN_KW\t" + yytext());
                    return YYParser.RETURN_KW;
                }
                case 86:
                    break;
                case 42: {
                    System.out.println("RECORD_KW\t" + yytext());
                    return YYParser.RECORD_KW;
                }
                case 87:
                    break;
                case 43: {
                    System.out.println("STATIC_KW\t" + yytext());
                    return YYParser.STATIC_KW;
                }
                case 88:
                    break;
                case 44: {
                    System.out.println("SWITCH_KW\t" + yytext());
                    return YYParser.SWITCH_KW;
                }
                case 89:
                    break;
                case 45: {
                    System.out.println("DEFAULT_KW\t" + yytext());
                    return YYParser.DEFAULT_KW;
                }
                case 90:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return -1;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

    @Override
    public void yyerror(String s) {
        System.out.println("Error at" + yytext() + " message:" + s);
    }


}
