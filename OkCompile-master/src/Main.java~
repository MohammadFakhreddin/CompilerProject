/* The following code was generated by JFlex 1.6.0 */

/* --------------------------Usercode Section------------------------ */

import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Espadan/IdeaProjects/okCompilePhase1/OkCompile/lexInput.flex</tt>
 */
class Main {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\17\1\16\1\24\1\25\1\15\22\0\1\17\2\0\1\4" +
                    "\1\0\1\44\1\0\1\22\1\47\1\47\1\43\1\41\1\47\1\42" +
                    "\1\26\1\23\1\2\11\3\1\47\1\47\1\0\1\45\1\0\1\46" +
                    "\1\0\32\20\1\47\1\21\1\47\3\0\1\12\1\35\1\34\1\30" +
                    "\1\10\1\11\1\37\1\31\1\32\1\20\1\36\1\13\1\20\1\1" +
                    "\1\27\1\20\1\40\1\6\1\14\1\5\1\7\1\20\1\33\3\20" +
                    "\1\47\1\0\1\47\7\0\1\24\u1fa2\0\1\24\1\24\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\2\1\2\2\11\1\2\3\2\1\1\4\1\5" +
                    "\6\1\4\4\1\6\1\7\1\5\15\0\1\10\12\0" +
                    "\1\11\2\0\1\12\2\0\1\13\1\14\3\0\1\15" +
                    "\2\0\1\16\5\0\1\17\7\0\1\20\1\21\7\0" +
                    "\1\22\6\0\1\23\2\0\1\24\2\0\1\11\1\0" +
                    "\1\25\17\0\2\10\1\0\1\26\1\27\2\0\1\30" +
                    "\5\0\1\31\7\0\1\32\1\0\1\21\3\0\1\33" +
                    "\1\34\4\0\1\35\1\36\1\37\1\40\2\0\1\41";

    private static int[] zzUnpackAction() {
        int[] result = new int[165];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118" +
                    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\50" +
                    "\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370" +
                    "\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\50\0\50\0\50" +
                    "\0\50\0\u0460\0\u0140\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528" +
                    "\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668" +
                    "\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8" +
                    "\0\u07d0\0\u0488\0\u07f8\0\u0820\0\50\0\u0848\0\u0870\0\u0898" +
                    "\0\50\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u0938" +
                    "\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\50\0\u0a78\0\u0aa0" +
                    "\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0938\0\u0938\0\u0b90" +
                    "\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0" +
                    "\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0938\0\u0dc0\0\u0de8" +
                    "\0\u0938\0\u0e10\0\u0e38\0\50\0\u0e60\0\u0938\0\u0e88\0\u0eb0" +
                    "\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0" +
                    "\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u0ca8\0\u1108" +
                    "\0\u04d8\0\u0938\0\u1130\0\u1158\0\u0938\0\u1180\0\u11a8\0\u11d0" +
                    "\0\u11f8\0\u1220\0\u0938\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8" +
                    "\0\u1310\0\u10e0\0\u0938\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8" +
                    "\0\u0938\0\u0140\0\u1400\0\u1428\0\u1450\0\u1478\0\u0938\0\u0938" +
                    "\0\u0938\0\u0938\0\u14a0\0\u14c8\0\u0938";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[165];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\2\20\1\11" +
                    "\1\21\1\22\1\23\1\2\1\20\1\24\1\25\1\26" +
                    "\1\11\1\27\1\30\1\31\1\32\3\11\1\33\1\34" +
                    "\1\35\1\36\1\37\1\40\1\41\51\0\1\42\2\43" +
                    "\1\0\1\44\1\45\1\43\1\46\1\43\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\51\1\52\1\43\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\42\2\57\1\0" +
                    "\1\44\1\45\1\43\1\46\1\43\1\47\1\43\1\50" +
                    "\3\0\1\43\5\0\1\60\1\61\1\52\1\43\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\42\2\5\1\0" +
                    "\1\44\1\45\1\43\1\46\1\43\1\47\1\43\1\50" +
                    "\3\0\1\43\5\0\1\60\1\61\1\52\1\43\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\62\3\0\10\62" +
                    "\3\0\1\62\6\0\12\62\10\0\1\42\2\43\1\0" +
                    "\1\44\1\63\1\43\1\46\1\43\1\47\1\43\1\50" +
                    "\3\0\1\43\6\0\1\61\1\52\1\64\1\53\1\54" +
                    "\1\55\1\56\3\43\10\0\1\42\2\43\1\0\1\44" +
                    "\1\45\1\43\1\65\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\43\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\42\2\43\1\0\1\44\1\45" +
                    "\1\43\1\46\1\43\1\47\1\43\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\54\1\55\1\56" +
                    "\3\43\10\0\1\66\2\43\1\0\1\44\1\45\1\43" +
                    "\1\46\1\43\1\47\1\67\1\50\3\0\1\43\6\0" +
                    "\1\61\1\52\1\43\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\44\1\45\1\43\1\46" +
                    "\1\43\1\70\1\43\1\50\3\0\1\43\6\0\1\61" +
                    "\1\52\1\43\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\71\2\43\1\0\1\44\1\45\1\43\1\46\1\43" +
                    "\1\47\1\43\1\50\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\42" +
                    "\2\43\1\0\1\72\1\45\1\43\1\46\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\43" +
                    "\1\53\1\54\1\55\1\56\3\43\10\0\1\42\2\43" +
                    "\1\0\1\73\1\45\1\43\1\46\1\43\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\43\1\53" +
                    "\1\74\1\55\1\56\3\43\25\0\1\20\34\0\1\75" +
                    "\1\0\10\75\3\0\1\75\1\76\5\0\12\75\12\0" +
                    "\1\77\1\0\10\77\3\0\1\77\6\0\12\77\32\0" +
                    "\1\100\21\0\1\101\3\0\1\102\6\0\1\103\2\0" +
                    "\1\102\23\0\1\104\11\0\1\42\2\43\1\0\1\44" +
                    "\1\105\1\43\1\46\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\43\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\42\2\43\1\0\1\44\1\45" +
                    "\1\43\1\106\1\43\1\47\1\43\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\54\1\55\1\56" +
                    "\3\43\10\0\1\107\2\43\1\0\1\44\1\45\1\43" +
                    "\1\46\1\110\1\47\1\43\1\50\3\0\1\43\6\0" +
                    "\1\61\1\52\1\43\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\44\1\45\1\43\1\46" +
                    "\1\43\1\47\1\43\1\50\3\0\1\43\6\0\1\61" +
                    "\1\52\1\111\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\42\2\43\1\0\1\44\1\45\1\43\1\46\1\43" +
                    "\1\112\1\43\1\50\3\0\1\43\6\0\1\61\1\52" +
                    "\1\113\1\53\1\54\1\55\1\56\3\43\10\0\1\42" +
                    "\2\43\1\0\1\44\1\114\1\43\1\46\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\115\1\52\1\43" +
                    "\1\53\1\54\1\55\1\56\3\43\50\0\1\116\3\0" +
                    "\1\101\44\0\1\116\2\0\1\101\47\0\1\101\3\0" +
                    "\1\42\2\43\1\0\1\44\1\45\1\43\1\46\1\43" +
                    "\1\47\1\43\1\50\3\0\1\43\6\0\1\117\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\42" +
                    "\2\43\1\0\1\44\1\45\1\43\1\46\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\120" +
                    "\1\53\1\54\1\55\1\56\3\43\10\0\1\42\2\43" +
                    "\1\0\1\44\1\45\1\43\1\121\1\43\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\43\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\122\2\43\1\0" +
                    "\1\44\1\45\1\43\1\46\1\43\1\47\1\123\1\50" +
                    "\3\0\1\43\6\0\1\61\1\52\1\43\1\53\1\54" +
                    "\1\55\1\56\3\43\10\0\1\122\2\43\1\0\1\44" +
                    "\1\45\1\43\1\46\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\43\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\42\2\43\1\0\1\124\1\45" +
                    "\1\43\1\46\1\43\1\47\1\43\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\125\1\55\1\56" +
                    "\3\43\10\0\1\42\2\43\1\0\1\126\1\127\1\43" +
                    "\1\46\1\43\1\47\1\43\1\50\3\0\1\43\6\0" +
                    "\1\61\1\52\1\43\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\44\1\45\1\43\1\130" +
                    "\1\43\1\47\1\43\1\50\3\0\1\43\6\0\1\61" +
                    "\1\52\1\43\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\131\2\43\1\0\1\44\1\45\1\43\1\46\1\127" +
                    "\1\47\1\43\1\50\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\42" +
                    "\2\43\1\0\1\44\1\45\1\43\1\46\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\132" +
                    "\1\53\1\54\1\55\1\56\3\43\10\0\1\42\2\43" +
                    "\1\0\1\44\1\45\1\43\1\46\1\43\1\133\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\134\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\42\2\43\1\0" +
                    "\1\44\1\45\1\43\1\46\1\43\1\47\1\43\1\50" +
                    "\3\0\1\43\6\0\1\135\1\52\1\43\1\53\1\54" +
                    "\1\55\1\56\3\43\10\0\1\42\2\57\1\0\1\44" +
                    "\1\45\1\43\1\46\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\5\0\1\136\1\61\1\52\1\43\1\53\1\54" +
                    "\1\55\1\56\3\43\11\0\2\137\45\0\1\42\2\43" +
                    "\1\0\1\44\1\127\1\43\1\46\1\43\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\43\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\140\3\0\10\140" +
                    "\3\0\1\140\6\0\12\140\10\0\1\42\2\43\1\0" +
                    "\1\44\1\45\1\141\1\121\1\43\1\47\1\43\1\50" +
                    "\3\0\1\43\6\0\1\61\1\52\1\43\1\53\1\54" +
                    "\1\55\1\56\3\43\10\0\1\42\2\43\1\0\1\44" +
                    "\1\45\1\43\1\142\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\43\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\122\2\43\1\0\1\143\1\45" +
                    "\1\43\1\46\1\43\1\144\1\123\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\54\1\145\1\56" +
                    "\3\43\10\0\1\42\2\43\1\0\1\44\1\45\1\43" +
                    "\1\46\1\43\1\47\1\43\1\50\3\0\1\43\6\0" +
                    "\1\117\1\146\1\43\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\44\1\45\1\43\1\46" +
                    "\1\43\1\47\1\43\1\147\3\0\1\43\6\0\1\61" +
                    "\1\52\1\43\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\122\2\43\1\0\1\44\1\45\1\43\1\46\1\43" +
                    "\1\47\1\150\1\50\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\42" +
                    "\2\43\1\0\1\44\1\45\1\43\1\46\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\117\1\151\1\43" +
                    "\1\53\1\54\1\55\1\56\3\43\10\0\1\42\2\43" +
                    "\1\0\1\44\1\45\1\43\1\46\1\43\1\152\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\120\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\42\2\43\1\0" +
                    "\1\44\1\45\1\43\1\46\1\43\1\47\1\43\1\50" +
                    "\3\0\1\43\6\0\1\61\1\52\1\132\1\153\1\54" +
                    "\1\55\1\56\3\43\12\0\1\75\1\0\10\75\3\0" +
                    "\1\75\6\0\12\75\31\0\1\75\25\0\15\100\2\0" +
                    "\5\100\2\0\22\100\10\0\1\154\77\0\1\154\14\0" +
                    "\1\154\2\0\1\154\40\0\3\127\1\0\10\127\3\0" +
                    "\1\127\6\0\12\127\10\0\1\122\2\43\1\0\1\44" +
                    "\1\45\1\43\1\46\1\155\1\47\1\123\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\43\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\42\2\43\1\0\1\156\1\45" +
                    "\1\43\1\46\1\43\1\47\1\43\1\50\3\0\1\43" +
                    "\6\0\1\117\1\52\1\43\1\53\1\54\1\55\1\56" +
                    "\3\43\10\0\1\42\2\43\1\0\1\44\1\45\1\43" +
                    "\1\46\1\43\1\47\1\43\1\50\3\0\1\43\6\0" +
                    "\1\61\1\52\1\43\1\157\1\54\1\55\1\56\3\43" +
                    "\10\0\1\122\2\43\1\0\1\44\1\45\1\43\1\46" +
                    "\1\43\1\47\1\43\1\160\3\0\1\43\6\0\1\61" +
                    "\1\52\1\43\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\42\2\43\1\0\1\44\1\45\1\43\1\46\1\43" +
                    "\1\161\1\43\1\50\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\42" +
                    "\2\43\1\0\1\44\1\45\1\43\1\162\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\43" +
                    "\1\53\1\54\1\55\1\56\3\43\10\0\1\42\2\43" +
                    "\1\0\1\44\1\127\1\43\1\46\1\43\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\163\1\52\1\43\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\42\2\43\1\0" +
                    "\2\127\1\43\1\46\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\43\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\42\2\43\1\0\1\44\1\45" +
                    "\1\43\1\164\1\43\1\47\1\43\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\54\1\55\1\56" +
                    "\3\43\10\0\1\122\2\43\1\0\1\165\1\45\1\43" +
                    "\1\46\1\43\1\166\1\123\1\50\3\0\1\43\6\0" +
                    "\1\61\1\52\1\43\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\44\1\45\1\43\1\46" +
                    "\1\43\1\47\1\43\1\50\3\0\1\43\6\0\1\117" +
                    "\1\127\1\43\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\42\2\43\1\0\1\44\1\45\1\43\1\46\1\43" +
                    "\1\47\1\43\1\167\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\42" +
                    "\2\43\1\0\1\44\1\45\1\43\1\46\1\43\1\170" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\120" +
                    "\1\53\1\54\1\55\1\56\3\43\10\0\1\42\2\43" +
                    "\1\0\1\44\1\45\1\43\1\46\1\43\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\132\1\171" +
                    "\1\54\1\55\1\56\3\43\10\0\1\122\2\43\1\0" +
                    "\1\44\1\45\1\43\1\46\1\172\1\47\1\123\1\50" +
                    "\3\0\1\43\6\0\1\61\1\52\1\43\1\53\1\54" +
                    "\1\55\1\56\3\43\10\0\1\42\2\43\1\0\1\127" +
                    "\1\45\1\43\1\46\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\6\0\1\117\1\52\1\43\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\42\2\43\1\0\1\44\1\45" +
                    "\1\43\1\46\1\43\1\47\1\43\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\173\1\54\1\55\1\56" +
                    "\3\43\10\0\1\122\2\43\1\0\1\44\1\45\1\43" +
                    "\1\46\1\43\1\47\1\43\1\167\3\0\1\43\6\0" +
                    "\1\61\1\52\1\43\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\44\1\45\1\43\1\46" +
                    "\1\43\1\174\1\43\1\50\3\0\1\43\6\0\1\61" +
                    "\1\52\1\43\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\42\2\43\1\0\1\44\1\127\1\43\1\46\1\43" +
                    "\1\47\1\43\1\50\3\0\1\43\6\0\1\175\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\11\0\2\176" +
                    "\46\0\1\177\1\137\46\0\2\200\45\0\1\42\2\43" +
                    "\1\0\1\44\1\45\1\43\1\201\1\43\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\43\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\202\2\43\1\0" +
                    "\1\44\1\45\1\43\1\46\1\43\1\47\1\123\1\50" +
                    "\3\0\1\43\6\0\1\61\1\52\1\43\1\53\1\54" +
                    "\1\55\1\56\3\43\10\0\1\42\2\43\1\0\1\44" +
                    "\1\45\1\203\1\46\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\120\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\122\2\43\1\0\1\44\1\45" +
                    "\1\43\1\46\1\43\1\47\1\156\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\54\1\55\1\56" +
                    "\3\43\10\0\1\42\2\43\1\0\1\44\1\45\1\43" +
                    "\1\46\1\43\1\133\1\43\1\50\3\0\1\43\6\0" +
                    "\1\204\1\52\1\134\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\124\1\45\1\43\1\205" +
                    "\1\43\1\47\1\43\1\50\3\0\1\43\6\0\1\61" +
                    "\1\52\1\43\1\53\1\125\1\55\1\56\3\43\10\0" +
                    "\1\42\2\43\1\0\1\44\1\45\1\43\1\46\1\43" +
                    "\1\47\1\43\1\206\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\122" +
                    "\2\43\1\0\1\207\1\45\1\43\1\46\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\43" +
                    "\1\53\1\54\1\55\1\56\3\43\10\0\1\131\2\43" +
                    "\1\0\1\210\1\45\1\43\1\46\1\127\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\43\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\42\2\43\1\0" +
                    "\1\44\1\45\1\43\1\46\1\43\1\211\1\43\1\50" +
                    "\3\0\1\43\6\0\1\61\1\52\1\43\1\53\1\54" +
                    "\1\55\1\56\3\43\10\0\1\131\2\43\1\0\1\44" +
                    "\1\45\1\43\1\46\1\127\1\47\1\212\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\43\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\42\2\43\1\0\1\124\1\45" +
                    "\1\43\1\213\1\43\1\47\1\43\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\125\1\55\1\56" +
                    "\3\43\10\0\1\122\2\43\1\0\1\44\1\156\1\43" +
                    "\1\46\1\43\1\47\1\43\1\50\3\0\1\43\6\0" +
                    "\1\61\1\52\1\43\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\122\2\43\1\0\1\165\1\45\1\43\1\46" +
                    "\1\43\1\214\1\123\1\50\3\0\1\43\6\0\1\61" +
                    "\1\52\1\43\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\42\2\43\1\0\1\44\1\127\1\43\1\46\1\43" +
                    "\1\47\1\156\1\50\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\127" +
                    "\2\43\1\0\1\44\1\45\1\43\1\46\1\43\1\47" +
                    "\1\123\1\50\3\0\1\43\6\0\1\61\1\52\1\43" +
                    "\1\53\1\54\1\55\1\56\3\43\10\0\1\42\2\43" +
                    "\1\0\1\44\1\45\1\215\1\46\1\43\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\120\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\122\2\43\1\0" +
                    "\1\44\1\45\1\43\1\46\1\43\1\47\1\127\1\50" +
                    "\3\0\1\43\6\0\1\61\1\52\1\43\1\53\1\54" +
                    "\1\55\1\56\3\43\10\0\1\42\2\43\1\0\1\124" +
                    "\1\45\1\43\1\127\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\43\1\53\1\125\1\55" +
                    "\1\56\3\43\10\0\1\122\2\43\1\0\1\216\1\45" +
                    "\1\43\1\46\1\43\1\47\1\43\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\54\1\55\1\56" +
                    "\3\43\10\0\1\131\2\43\1\0\1\217\1\45\1\43" +
                    "\1\46\1\127\1\47\1\43\1\50\3\0\1\43\6\0" +
                    "\1\61\1\52\1\43\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\44\1\45\1\43\1\46" +
                    "\1\43\1\220\1\43\1\50\3\0\1\43\6\0\1\61" +
                    "\1\52\1\43\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\131\2\43\1\0\1\44\1\45\1\43\1\46\1\127" +
                    "\1\47\1\221\1\50\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\122" +
                    "\2\43\1\0\1\44\1\127\1\43\1\46\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\43" +
                    "\1\53\1\54\1\55\1\56\3\43\10\0\1\42\2\43" +
                    "\1\0\1\44\1\127\1\43\1\46\1\43\1\47\1\127" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\43\1\53" +
                    "\1\54\1\55\1\56\3\43\11\0\1\176\1\222\46\0" +
                    "\2\223\45\0\1\42\2\43\1\0\1\44\1\224\1\43" +
                    "\1\46\1\43\1\47\1\43\1\50\3\0\1\43\6\0" +
                    "\1\61\1\52\1\43\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\44\1\225\1\43\1\46" +
                    "\1\43\1\47\1\43\1\50\3\0\1\43\6\0\1\61" +
                    "\1\52\1\43\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\42\2\43\1\0\1\124\1\45\1\43\1\201\1\43" +
                    "\1\47\1\43\1\50\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\125\1\55\1\56\3\43\10\0\1\42" +
                    "\2\43\1\0\1\44\1\45\1\43\1\46\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\120" +
                    "\1\226\1\54\1\55\1\56\3\43\10\0\1\42\2\43" +
                    "\1\0\1\44\1\45\1\43\1\46\1\43\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\120\1\53" +
                    "\1\54\1\227\1\56\3\43\10\0\1\122\2\43\1\0" +
                    "\1\44\1\45\1\230\1\46\1\43\1\47\1\43\1\50" +
                    "\3\0\1\43\6\0\1\61\1\52\1\43\1\53\1\54" +
                    "\1\55\1\56\3\43\10\0\1\42\2\43\1\0\1\44" +
                    "\1\45\1\43\1\231\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\43\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\122\2\43\1\0\1\44\1\45" +
                    "\1\43\1\46\1\43\1\47\1\127\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\54\1\55\1\56" +
                    "\1\232\2\43\10\0\1\42\2\43\1\0\1\44\1\233" +
                    "\1\43\1\46\1\43\1\47\1\43\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\54\1\55\1\56" +
                    "\3\43\10\0\1\42\2\43\1\0\1\44\1\45\1\43" +
                    "\1\46\1\43\1\47\1\43\1\50\3\0\1\43\6\0" +
                    "\1\61\1\52\1\120\1\234\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\44\1\45\1\43\1\46" +
                    "\1\43\1\47\1\43\1\50\3\0\1\43\6\0\1\61" +
                    "\1\52\1\120\1\53\1\54\1\235\1\56\3\43\10\0" +
                    "\1\122\2\43\1\0\1\44\1\45\1\236\1\46\1\43" +
                    "\1\47\1\43\1\50\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\42" +
                    "\2\43\1\0\1\44\1\45\1\43\1\127\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\43" +
                    "\1\53\1\54\1\55\1\56\3\43\10\0\1\237\2\43" +
                    "\1\0\1\44\1\45\1\43\1\121\1\43\1\47\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\43\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\3\127\1\0\10\127" +
                    "\3\0\1\127\6\0\1\127\1\240\10\127\10\0\1\131" +
                    "\2\43\1\0\1\44\1\45\1\43\1\46\1\127\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\43" +
                    "\1\53\1\54\1\241\1\56\3\43\10\0\1\42\2\43" +
                    "\1\0\1\44\1\45\1\43\1\46\1\43\1\133\1\43" +
                    "\1\50\3\0\1\43\6\0\1\61\1\52\1\242\1\53" +
                    "\1\54\1\55\1\56\3\43\10\0\1\42\2\43\1\0" +
                    "\1\44\1\45\1\43\1\46\1\43\1\47\1\243\1\50" +
                    "\3\0\1\43\6\0\1\61\1\52\1\43\1\53\1\54" +
                    "\1\55\1\56\3\43\10\0\1\127\2\43\1\0\1\44" +
                    "\1\45\1\43\1\121\1\43\1\47\1\43\1\50\3\0" +
                    "\1\43\6\0\1\61\1\52\1\43\1\53\1\54\1\55" +
                    "\1\56\3\43\10\0\1\131\2\43\1\0\1\44\1\45" +
                    "\1\43\1\46\1\127\1\47\1\43\1\50\3\0\1\43" +
                    "\6\0\1\61\1\52\1\43\1\53\1\54\1\127\1\56" +
                    "\3\43\10\0\1\42\2\43\1\0\1\44\1\45\1\43" +
                    "\1\46\1\43\1\133\1\43\1\50\3\0\1\43\6\0" +
                    "\1\61\1\52\1\127\1\53\1\54\1\55\1\56\3\43" +
                    "\10\0\1\42\2\43\1\0\1\44\1\45\1\43\1\46" +
                    "\1\43\1\47\1\244\1\50\3\0\1\43\6\0\1\61" +
                    "\1\52\1\43\1\53\1\54\1\55\1\56\3\43\10\0" +
                    "\1\42\2\43\1\0\1\245\1\45\1\43\1\46\1\43" +
                    "\1\47\1\43\1\50\3\0\1\43\6\0\1\61\1\52" +
                    "\1\43\1\53\1\54\1\55\1\56\3\43\10\0\1\42" +
                    "\2\43\1\0\1\127\1\45\1\43\1\46\1\43\1\47" +
                    "\1\43\1\50\3\0\1\43\6\0\1\61\1\52\1\43" +
                    "\1\53\1\54\1\55\1\56\3\43\7\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[5360];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\15\1\1\11\15\1\4\11\15\0\1\1" +
                    "\12\0\1\1\2\0\1\11\2\0\1\1\1\11\3\0" +
                    "\1\1\2\0\1\1\5\0\1\11\7\0\2\1\7\0" +
                    "\1\1\6\0\1\1\2\0\1\1\2\0\1\11\1\0" +
                    "\1\1\17\0\2\1\1\0\2\1\2\0\1\1\5\0" +
                    "\1\1\7\0\1\1\1\0\1\1\3\0\2\1\4\0" +
                    "\4\1\2\0\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[165];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    private List<String> symbolTable;

    private int addSymbol(String symbol) {
        if (symbolTable == null) {
            symbolTable = new ArrayList<String>();
        }
        for (int i = 0; i < symbolTable.size(); i++) {
            if (symbol.equals(symbolTable.get(i))) {
                return i;
            }
        }
        symbolTable.add(symbol);
        return symbolTable.size() - 1;
    }

    private String getSymbol(int id) {
        return symbolTable.get(id);
    }

    private String[] relOps = new String[]{".lt", ".gt", ".ge", ".le", ".ne"};


    static PrintStream out;

    public static void main(String argv[]) {
        String encodingName = "UTF-8";
        Main scanner = null;
        try {
            out = new PrintStream(new FileOutputStream("OkCompile//output.txt"));
            System.setOut(out);
            out.println("lexer output");
            out.println("RegEx\tToken\tAttVal\n\n");
            java.io.FileInputStream stream = new java.io.FileInputStream("OkCompile//Input.txt");
            java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
            scanner = new Main(reader);
            while (!scanner.zzAtEOF) scanner.next_token();
        } catch (java.io.FileNotFoundException e) {
            System.out.println("File not found : ");
        } catch (java.io.IOException e) {
            System.out.println("IO error scanning file");
            System.out.println(e);
        } catch (Exception e) {
            System.out.println("Unexpected exception:");
            e.printStackTrace();
        }
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    Main(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 170) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

      /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

    /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int totalRead = 0;
        while (totalRead < requested) {
            int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
            if (numRead == -1) {
                break;
            }
            totalRead += numRead;
        }

        if (totalRead > 0) {
            zzEndRead += totalRead;
            if (totalRead == requested) { /* possibly more input available */
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            return false;
        }

        // totalRead = 0: End of stream
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public int next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1: {
                    out.println("Illegal character <" + yytext() + ">");
                }
                case 34:
                    break;
                case 2: {
                    out.println("NUMCONST\t" + yytext());
                }
                case 35:
                    break;
                case 3: { /* just skip what was found, do nothing */
                }
                case 36:
                    break;
                case 4: {
                    out.println("MATH_OP_KW\t" + yytext());
                }
                case 37:
                    break;
                case 5: {
                    out.println("PUNC_KW\t" + yytext());
                }
                case 38:
                    break;
                case 6: {
                    out.println("ASSIGN_KW\t" + yytext());
                }
                case 39:
                    break;
                case 7: {
                    out.println("UNARY_OP_KW\t" + yytext());
                }
                case 40:
                    break;
                case 8: {
                    out.println("illegal Character\t" + yytext());
                }
                case 41:
                    break;
                case 9: {
                    out.println("REL_OP_KW\t" + yytext());
                }
                case 42:
                    break;
                case 10: {
                    out.println("CHARCONST\t" + yytext());
                }
                case 43:
                    break;
                case 11: {
                    out.println("COMMENT\t" + yytext());
                }
                case 44:
                    break;
                case 12: {
                    out.println("MATH_OP_ASSIGN_KW\t" + yytext());
                }
                case 45:
                    break;
                case 13: {
                    out.println("OR_KW\t" + yytext());
                }
                case 46:
                    break;
                case 14: {
                    out.println("IF_KW\t" + yytext());
                }
                case 47:
                    break;
                case 15: {
                    out.println("UNARY_MATH_OP_KW\t" + yytext());
                }
                case 48:
                    break;
                case 16: {
                    out.println("NOT_KW\t" + yytext());
                }
                case 49:
                    break;
                case 17: {
                    out.println("Illegal character:\t" + yytext());
                }
                case 50:
                    break;
                case 18: {
                    out.println("REALCONST\t" + yytext());
                }
                case 51:
                    break;
                case 19: {
                    out.println("END_KW\t" + yytext());
                }
                case 52:
                    break;
                case 20: {
                    out.println("AND_KW\t" + yytext());
                }
                case 53:
                    break;
                case 21: {
                    out.println("TYPESPECIFIER_KW\t" + yytext());
                }
                case 54:
                    break;
                case 22: {
                    out.println("BOOL_KW\t" + yytext());
                }
                case 55:
                    break;
                case 23: {
                    out.println("THEN_KW\t" + yytext());
                }
                case 56:
                    break;
                case 24: {
                    out.println("ELSE_KW\t" + yytext());
                }
                case 57:
                    break;
                case 25: {
                    out.println("CASE_KW\t" + yytext());
                }
                case 58:
                    break;
                case 26: {
                    int id = addSymbol(yytext());
                    //out.println("ID\t"+yytext()+"\t"+id);
                    return YYParser.ID;
                }
                case 59:
                    break;
                case 27: {
                    out.println("WHILE_KW\t" + yytext());
                }
                case 60:
                    break;
                case 28: {
                    out.println("BREAK_KW\t" + yytext());
                }
                case 61:
                    break;
                case 29: {
                    out.println("RETURN_KW\t" + yytext());
                }
                case 62:
                    break;
                case 30: {
                    out.println("RECORD_KW\t" + yytext());
                }
                case 63:
                    break;
                case 31: {
                    out.println("STATIC_KW\t" + yytext());
                }
                case 64:
                    break;
                case 32: {
                    out.println("SWITCH_KW\t" + yytext());
                }
                case 65:
                    break;
                case 33: {
                    out.println("DEFAULT_KW\t" + yytext());
                }
                case 66:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return -1;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
